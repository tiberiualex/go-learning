package main

import (
	"net/http"
	"testing"
	"tiberiualex-golearning-snippetbox/internal/assert"
)

// func TestPing(t *testing.T) {
// 	// Initialize a new httptest.ResponseRecorder.
// 	rr := httptest.NewRecorder()

// 	// Initialize a new dummy http.Request.
// 	r, err := http.NewRequest(http.MethodGet, "/", nil)
// 	if err != nil {
// 		// t.Fatal() will stop the test execution, Errorf will not
// 		t.Fatal(err)
// 	}

// 	// Call the ping handler function, passing it the
// 	// httptest.ResponseRecorder and http.Request.
// 	ping(rr, r)

// 	// Call the Result() method on the http.ResponseRecorder to get the
// 	// http.Response generated by the ping handler.
// 	rs := rr.Result()

// 	// Check that the status code written by the ping handler was 200.
// 	assert.Equal(t, rs.StatusCode, http.StatusOK)

// 	// And we can check that the response body written by the ping handler
// 	// equals "OK".
// 	defer rs.Body.Close()
// 	body, err := io.ReadAll(rs.Body)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	bytes.TrimSpace(body)

// 	assert.Equal(t, string(body), "OK")
// }

// func TestPing(t *testing.T) {
// 	// Create a new instance of our application struct. For now, this just
// 	// contains a couple of mock loggers (which discard anything written to
// 	// them).
// 	app := &application{
// 		errorLog: log.New(io.Discard, "", 0),
// 		infoLog:  log.New(io.Discard, "", 0),
// 	}

// 	// We then use the httptest.NewTLSServer() function to create a new test
// 	// server, passing in the value returned by our app.routes() method as the
// 	// handler for the server. This starts up a HTTPS server which listens on a
// 	// randomly-chosen port of your local machine for the duration of the test.
// 	// Notice that we defer a call to ts.Close() so that the server is shutdown
// 	// when the test finishes
// 	ts := httptest.NewTLSServer(app.routes())
// 	defer ts.Close()

// 	// The network address that the test server is listening on is contained in
// 	// the ts.URL field. We can use this along with the ts.Client().Get() method
// 	// to make a GET /ping request against the test server. This returns a
// 	// http.Response struct containing the response.
// 	rs, err := ts.Client().Get(ts.URL + "/ping")
// 	if err != nil {
// 		t.Fatal(err)
// 	}

// 	// We can then check the value of the response status code and body using
// 	// the same pattern as before
// 	assert.Equal(t, rs.StatusCode, http.StatusOK)

// 	defer rs.Body.Close()
// 	body, err := io.ReadAll(rs.Body)
// 	if err != nil {
// 		t.Fatal(err)
// 	}
// 	bytes.TrimSpace(body)

// 	assert.Equal(t, string(body), "OK")
// }

func TestPing(t *testing.T) {
	app := newTestApplication(t)

	ts := newTestServer(t, app.routes())
	defer ts.Close()

	code, _, body := ts.get(t, "/ping")

	assert.Equal(t, code, http.StatusOK)
	assert.Equal(t, body, "OK")
}
